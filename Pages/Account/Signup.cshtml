@page
@model SignupModel

<div class="padding-large container d-flex justify-content-center align-items-center vh-100">
  <div class="col-md-8"> <!-- Increased width from col-md-6 to col-md-8 -->
	<div class="card mt-3 p-5" style="max-width: 800px;"> <!-- Increased padding (p-5) and max-width -->
	  <div class="card-header bg-white text-black text-center" style="margin: 0; padding: 20px 0;"> <!-- Removed margin, added vertical padding -->
		<h4 style="font-size: 32px;">@Localizer["Sign Up"]</h4> <!-- Increased font size for the title -->
	  </div>
	  <div class="card-body">
		<div class="text-danger" asp-validation-summary="All"></div>

		<form method="post">
			@Html.AntiForgeryToken()
			<input type="hidden" name="returnUrl" value="@Model.ReturnUrl"/>
			<div class="form-group">
				<label style="font-size: 20px;" asp-for="UserName"></label>
				<input class="form-control form-control-lg" asp-for="UserName" />
				<span asp-validation-for="UserName" class="text-danger"></span>
			</div>
			<div class="form-group">
				<label style="font-size: 20px;" asp-for="FullName"></label>
				<input class="form-control form-control-lg" asp-for="FullName" />
				<span asp-validation-for="FullName" class="text-danger"></span>
			</div>
			<div class="form-group">
				<label style="font-size: 20px;" asp-for="Email"></label>
				<input class="form-control form-control-lg" asp-for="Email" />
				<span asp-validation-for="Email" class="text-danger"></span>
			</div>
			<div class="form-group">
				<label style="font-size: 20px;" asp-for="Password"></label>
				<input asp-for="Password" type="password" class="form-control form-control-lg" />
				<span asp-validation-for="Password" class="text-danger"></span>
			</div>
			<div class="form-group">
				<label style="font-size: 20px;" asp-for="ConfirmPassword"></label>
				<input asp-for="ConfirmPassword" type="password" class="form-control form-control-lg" />
				<span asp-validation-for="ConfirmPassword" class="text-danger"></span>
			</div>
			<button class="btn btn-primary mt-4 w-100 btn-lg" type="submit">@Localizer["Signing Up"]</button>
		</form>
        <span>
            @Localizer["Already have an account?"] <a asp-page="Login">@Localizer["Log in!"]</a>
        </span>
	  </div>
	</div>
  </div>
</div>

@functions {
    public class SignupModel : PageModel
    {
        private UserManager<ApplicationUser> userManager;
        private RoleManager<IdentityRole> roleManager;
        private ISendEmail emailManager;
        private IRazorViewToStringRenderer razorView;
        private readonly ILogger<SignupModel> logger;
        private readonly IStringLocalizer<Store.Pages.Account.LoginModel> localizer;

		public SignupModel(UserManager<ApplicationUser> userMgr,
			RoleManager<IdentityRole> roleMgr,
			ISendEmail emailMgr,
			IRazorViewToStringRenderer razorViewToString,
			IStringLocalizer<Store.Pages.Account.LoginModel> loc,
			ILogger<SignupModel> log
		)
		{
			userManager = userMgr;
			roleManager = roleMgr;
			emailManager = emailMgr;
			razorView = razorViewToString;
			localizer = loc;
			logger = log;
		}

		[Required(ErrorMessageResourceName = "Required",
			ErrorMessageResourceType = typeof(ValidationMessages))]
		[LocalizedDisplayName("UserNameDisplay",
			NameResourceType = typeof(Store.Resources.Models.FormNames))]
		[BindProperty]
		public string UserName { get; set; } = "";

		[Required(ErrorMessageResourceName = "Required",
			ErrorMessageResourceType = typeof(ValidationMessages))]
		[LocalizedDisplayName("FullNameDisplay",
			NameResourceType = typeof(FormNames))]
		[BindProperty]
		public string FullName { get; set; } = "";

		[Required(ErrorMessageResourceName = "Required",
			ErrorMessageResourceType = typeof(ValidationMessages))]
		[EmailAddress(ErrorMessageResourceName = "Email",
			ErrorMessageResourceType = typeof(ValidationMessages))]
		[LocalizedDisplayName("EmailDisplay",
			NameResourceType = typeof(FormNames))]
		[BindProperty]
		public string Email { get; set; } = "";

		[RegularExpression(@"^(?=.*[A-Z])(?=.*[a-z])(?=.*\d).{3,}$",
			ErrorMessageResourceName = "PasswordReq",
			ErrorMessageResourceType = typeof(ValidationMessages))]
		[Required(ErrorMessageResourceName = "Required",
			ErrorMessageResourceType = typeof(ValidationMessages))]
		[MinLength(10, ErrorMessageResourceName = "MinLength",
			ErrorMessageResourceType = typeof(ValidationMessages))]
		[LocalizedDisplayName("PasswordDisplay",
			NameResourceType = typeof(FormNames))]
		[BindProperty]
		public string Password { get; set; } = "";

		[Required(ErrorMessageResourceName = "Required",
			ErrorMessageResourceType = typeof(ValidationMessages))]
		[Compare("Password", ErrorMessageResourceName = "MustMatch",
			ErrorMessageResourceType = typeof(ValidationMessages))]
		[LocalizedDisplayName("ConfirmPasswordDisplay",
			NameResourceType = typeof(FormNames))]
		[BindProperty]
		public string ConfirmPassword { get; set; } = "";

		[BindProperty(SupportsGet = true)]
		public string? ReturnUrl { get; set; }

		public async Task<IActionResult> OnPostAsync()
		{
			if (ModelState.IsValid)
			{
				ApplicationUser user = new ApplicationUser
				{
					FullName = this.FullName,
					Email = this.Email,
					UserName = this.UserName,
					Address = new AddressViewModel()
				};
				string password = this.Password;
				string role = "Regulars";

				if (await roleManager.FindByNameAsync(role) == null)
				{
					await roleManager.CreateAsync(new IdentityRole(role));
				}

				IdentityResult result = await userManager
					.CreateAsync(user, password);

				if (result.Succeeded)
				{
					string htmlContext = await razorView.RenderViewToStringAsync<int>("EmailSignupNotification", 4);
					await userManager.AddToRoleAsync(user, role);
					await emailManager.SendEmailAsync(this.Email, "ILoveParts Registration", htmlContext);
					logger.LogInformation("User {userName} signed up", user.UserName);
					return Redirect(ReturnUrl ?? "/");
				}
				ModelState.AddModelError("", localizer["RegistrationError"]);
			}
			return Page();
		}
	}
}
