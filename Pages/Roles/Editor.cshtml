@page "{id}"
@model EditorModel

<h5 class="bg-primary text-white text-center p-2">
	Edit Role: @Model.Role?.Name
</h5>

<form method="post">
	@Html.AntiForgeryToken()
	<input type="hidden" name="rolename" value="@Model.Role?.Name" />
	<div asp-validation-summary="All" class="text-danger"></div>
	<h5 class="bg-secondary text-white p-2">Members</h5>
	<table class="table table-sm table-striped table-bordered">
		<thead><tr><th>User</th><th>Email</th><th></th></tr></thead>
		<tbody>
			@if ((await Model.Members()).Count() == 0)
				{
				<tr>
					<td colspan="3" class="text-center">No members</td>
				</tr>
			}
			@foreach (ApplicationUser user in await Model.Members())
			{
				<tr>
					<td>@user.UserName</td>
					<td>@user.Email</td>
					<td>
					<button asp-route-userid="@user.Id"
						class="btn btn-primary btn-sm" type="submit">
						Change
					</button>
					</td>
				</tr>
			}
			</tbody>
	</table>
	<h5 class="bg-secondary text-white p-2">Non-Members</h5>

	<table class="table table-sm table-striped table-bordered">
		<thead><tr><th>User</th><th>Email</th><th></th></tr></thead>
		<tbody>
			@if ((await Model.NonMembers()).Count() == 0)
			{
				<tr>
					<td colspan="3" class="text-center">
						No non-members
					</td>
				</tr>
			}
			@foreach (ApplicationUser user in await Model.NonMembers())
			{
				<tr>
					<td>@user.UserName</td>
					<td>@user.Email</td>
					<td>
					<!-- Model binding will find userid through the tag helper-->
					<button asp-route-userid="@user.Id"
					class="btn btn-primary btn-sm" type="submit">
						Change
					</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
</form>

<a class="btn btn-secondary" asp-page="list">Back</a>

@functions{
	[Authorize(Roles = "Admins")]
	public class EditorModel : PageModel
	{
		public UserManager<ApplicationUser> UserManager;
		public RoleManager<IdentityRole> RoleManager;

		public EditorModel(UserManager<ApplicationUser> userManager,
			RoleManager<IdentityRole> roleManager)
		{
			UserManager = userManager;
			RoleManager = roleManager;
		}

		public IdentityRole? Role { get; set; } = new();

		public Task<IList<ApplicationUser>> Members()
		{
			if (Role?.Name != null)
			{
				return UserManager.GetUsersInRoleAsync(Role.Name);
			}
			return Task.FromResult(new List<ApplicationUser>()
				as IList<ApplicationUser>);
		}

		public async Task<IEnumerable<ApplicationUser>> NonMembers() =>
			UserManager.Users.ToList().Except(await Members());

		// model binding gets the id from the query string thanks to page "{id}"
		public async Task OnGetAsync(string id)
		{
			Role = await RoleManager.FindByIdAsync(id);
		}

		public async Task<IActionResult> OnPostAsync(string userid,
			string rolename)
		{
			Role = await RoleManager.FindByNameAsync(rolename);
			ApplicationUser? user = await UserManager.FindByIdAsync(userid);
			if (user != null)
			{
				IdentityResult result;
				if (await UserManager.IsInRoleAsync(user, rolename))
				{
					result = await UserManager.RemoveFromRoleAsync(user,
						rolename);
				}
				else
				{
					result = await UserManager.AddToRoleAsync(user, rolename);
				}
				if (result.Succeeded)
				{
					return RedirectToPage();
				}
				else
				{
					foreach (IdentityError err in result.Errors)
					{
						ModelState.AddModelError("", err.Description);
					}
					return RedirectToPage();
				}
			}
			return RedirectToPage();
		}
	}
}
