@page
@model OrdersModel

<section class="product-store padding-large ps-3" style="font-size: 17px;">
    <table class="table table-sm table-striped table-bordered">
    <thead>
        <tr><th colspan="5" class="text-center">Unshipped Orders</th></tr>
    </thead>
    <tbody>
        @if (Model.UnshippedOrders?.Count() > 0) 
        {
            @foreach (Order o in Model.UnshippedOrders) 
            {
                <tr>
                    <td>@o.Name</td>
                    <td>@o.Zip</td>
                    <th>Product</th>
                    <th>Quantity</th>
                    <td>
                        <form asp-page-handler="Ship">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="OrderID" value="@o.OrderID"/>
                            <button type="submit" class="btn btn-sm btn-danger">
                                Ship
                            </button>
                        </form>
                    </td>
                </tr>
                @foreach (CartLine line in o.Lines) 
                {
                    <tr>
                        <td colspan="2"></td>
                        <td>@line.Product.Name</td>
                        <td>@line.Quantity</td>
                        <td></td>
                    </tr>
                }
            }
        } 
        else 
        {
            <tr><td colspan="5" class="text-center">No Orders</td></tr>
        }
    </tbody>
    </table>

    <table class="table table-sm table-striped table-bordered">
    <thead>
        <tr><th colspan="5" class="text-center">Shipped Orders</th></tr>
    </thead>
    <tbody>
            @if (Model.ShippedOrders?.Count() > 0)
            {
                @foreach (Order o in Model.ShippedOrders)
                {
                    <tr>
                        <td>@o.Name</td>
                        <td>@o.Zip</td>
                        <th>Product</th>
                        <th>Quantity</th>
                        <td>
                            <form asp-page-handler="Unship">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="OrderID" value="@o.OrderID"/>
                                <button type="submit" class="btn btn-sm btn-danger">
                                    Reset
                                </button>
                            </form>
                        </td>
                    </tr>
                    @foreach (CartLine line in o.Lines)
                    {
                        <tr>
                            <td colspan="2"></td>
                            <td>@line.Product.Name</td>
                            <td>@line.Quantity</td>
                            <td></td>
                        </tr>
                    }
                }
            }
            else
            {
                <tr><td colspan="5" class="text-center">No Orders</td></tr>
            }
    </tbody>
    </table>
</section>

@functions{
	[Authorize(Roles = "Admins")]
	public class OrdersModel : PageModel
	{
		private IOrderRepository orderRepository;

		public OrdersModel(IOrderRepository repository)
		{
			orderRepository = repository;	
		}

		public IQueryable<Order> AllOrders { get; set; }

		public IQueryable<Order> ShippedOrders { get; set; }

		public IQueryable<Order> UnshippedOrders { get; set; }

		public void OnGet()
		{
			UpdateData(0);
		}

		public void UpdateData(int i)
		{
			switch (i)
			{
				case (0):
					AllOrders = orderRepository.Orders;
					UnshippedOrders = AllOrders.Where(o => !o.Shipped);
					ShippedOrders = AllOrders.Where(o => o.Shipped);
					break;
				case (1):
					AllOrders = orderRepository.Orders;
					ShippedOrders = AllOrders.Where(o => o.Shipped);
					break;
				case (2):
					AllOrders = orderRepository.Orders;
					UnshippedOrders = AllOrders.Where(o => !o.Shipped);
					break;
				default:
					break;
			}
        }

        public Task ShipOrder(int id) => UpdateOrder(id, true);
        public Task ResetOrder(int id) => UpdateOrder(id, false);

        private async Task UpdateOrder(int id, bool shipValue)
        {
            Order? o = await orderRepository.Orders.FirstOrDefaultAsync(o => o.OrderID == id);
            if (o != null)
            {
                o.Shipped = shipValue;
                orderRepository.SaveOrder(o);
            }
        }

        public async Task<IActionResult> OnPostShip(int OrderID)
        {
            UpdateData(0);
            Order? ord = ShippedOrders.FirstOrDefault(o => o.OrderID == OrderID);
            await ShipOrder(OrderID);
            return RedirectToPage();
        }

        public async Task<IActionResult> OnPostUnship(int OrderID)
        {
            UpdateData(0);
            Order? ord = await UnshippedOrders.FirstOrDefaultAsync(o => o.OrderID == OrderID);
            await ResetOrder(OrderID);
            return RedirectToPage();
        }
    }
}
